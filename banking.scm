(define (make-account balance)
	(define s (make-serializer))
	(define (withdraw amount)
		(if (>= balance amount) (begin (set! balance (- balance amount)) balance) 'insufficient_funds))
	(define (deposit amount)
	(begin (set! balance (+ amount balance)) balance) )
	(define (get-balance)
		balance)
	(lambda (request)
		(cond ((eq? request 'withdraw) (s withdraw))
			((eq? request 'deposit) (s deposit))
			((eq? request 'get-balance) get-balance))))

(define (make-serializer)
	(let ((mutex (make-mutex)))
	(lambda (p)
		(define (serialized-p args)
			(mutex 'acquire)
			( p args)
			(mutex 'release)) serialized-p)))
(define (make-mutex)
	(define cell (list false))
		(define (the-mutex m)
	(cond ((eq? m 'acquire) 
		(if (testandset! cell)
		(the-mutex 'acquire)))
	((eq? m 'release) (set-car! cell false))))
(define (testandset! cell)
	(if (car cell) true
	(begin (set-car! cell true) false))) the-mutex)
(define acc1 (make-account 100))
(define p1 (acc1 'withdraw))